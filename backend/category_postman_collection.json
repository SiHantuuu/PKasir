{
  "info": {
    "name": "Category API Collection",
    "description": "Complete API collection for Category management endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "categoryId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Categories",
      "item": [
        {
          "name": "Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Response contains created category data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('Nama');",
                  "});",
                  "",
                  "// Save category ID for other requests",
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('categoryId', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Nama\": \"Elektronik\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": ["{{baseUrl}}"],
              "path": ["categories"]
            },
            "description": "Create a new category"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"Nama\": \"Elektronik\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Kategori berhasil dibuat\",\n  \"data\": {\n    \"id\": 1,\n    \"Nama\": \"Elektronik\",\n    \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n    \"updatedAt\": \"2025-06-05T10:30:00.000Z\"\n  }\n}"
            },
            {
              "name": "Duplicate Category Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"Nama\": \"Elektronik\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories"]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Kategori dengan nama tersebut sudah ada\",\n  \"data\": null\n}"
            }
          ]
        },
        {
          "name": "Update Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Category name is updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('Nama');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Nama\": \"Elektronik & Gadget\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "{{categoryId}}"]
            },
            "description": "Update an existing category"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"Nama\": \"Elektronik & Gadget\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Kategori berhasil diperbarui\",\n  \"data\": {\n    \"id\": 1,\n    \"Nama\": \"Elektronik & Gadget\",\n    \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n    \"updatedAt\": \"2025-06-05T10:35:00.000Z\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Category by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test(\"Response contains category data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('Nama');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}?includeProducts=false",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "{{categoryId}}"],
              "query": [
                {
                  "key": "includeProducts",
                  "value": "false",
                  "description": "Include products in the response (true/false)"
                }
              ]
            },
            "description": "Get a single category by ID"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Data kategori berhasil diambil\",\n  \"data\": {\n    \"id\": 1,\n    \"Nama\": \"Elektronik\",\n    \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n    \"updatedAt\": \"2025-06-05T10:30:00.000Z\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Category by ID (with Products)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response includes products\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('products');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}?includeProducts=true",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "{{categoryId}}"],
              "query": [
                {
                  "key": "includeProducts",
                  "value": "true"
                }
              ]
            },
            "description": "Get a category with its associated products"
          },
          "response": [
            {
              "name": "Success Response with Products",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/1?includeProducts=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"],
                  "query": [
                    {
                      "key": "includeProducts",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Data kategori berhasil diambil\",\n  \"data\": {\n    \"id\": 1,\n    \"Nama\": \"Elektronik\",\n    \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n    \"updatedAt\": \"2025-06-05T10:30:00.000Z\",\n    \"products\": [\n      {\n        \"id\": 1,\n        \"Nama\": \"Smartphone\",\n        \"Harga\": 5000000,\n        \"Stok\": 10\n      },\n      {\n        \"id\": 2,\n        \"Nama\": \"Laptop\",\n        \"Harga\": 12000000,\n        \"Stok\": 5\n      }\n    ]\n  }\n}"
            }
          ]
        },
        {
          "name": "Get All Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data).to.have.property('categories');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories?page=1&limit=10&search=&includeProducts=false&sortBy=createdAt&sortOrder=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["categories"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (default: 10, max: 100)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term for category name"
                },
                {
                  "key": "includeProducts",
                  "value": "false",
                  "description": "Include products (true/false)"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Sort field (id, Nama, createdAt, updatedAt)"
                },
                {
                  "key": "sortOrder",
                  "value": "DESC",
                  "description": "Sort order (ASC/DESC)"
                }
              ]
            },
            "description": "Get all categories with pagination and filtering"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories?page=1&limit=10",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Data kategori berhasil diambil\",\n  \"data\": {\n    \"categories\": [\n      {\n        \"id\": 1,\n        \"Nama\": \"Elektronik\",\n        \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n        \"updatedAt\": \"2025-06-05T10:30:00.000Z\"\n      },\n      {\n        \"id\": 2,\n        \"Nama\": \"Fashion\",\n        \"createdAt\": \"2025-06-05T10:31:00.000Z\",\n        \"updatedAt\": \"2025-06-05T10:31:00.000Z\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 1,\n      \"totalItems\": 2,\n      \"itemsPerPage\": 10\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Search Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results contain search term\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.categories.length > 0) {",
                  "        pm.expect(jsonData.data.categories[0].Nama.toLowerCase()).to.include('elek');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories?search=elek&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["categories"],
              "query": [
                {
                  "key": "search",
                  "value": "elek"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search categories by name"
          }
        },
        {
          "name": "Delete Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 400) {",
                  "    pm.test(\"Error message about products using category\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('produk');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}?force=false",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "{{categoryId}}"],
              "query": [
                {
                  "key": "force",
                  "value": "false",
                  "description": "Force delete even if products are using this category"
                }
              ]
            },
            "description": "Delete a category (soft delete by default)"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Kategori berhasil dihapus\",\n  \"data\": {\n    \"deletedCategory\": {\n      \"id\": 1,\n      \"Nama\": \"Elektronik\",\n      \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n      \"updatedAt\": \"2025-06-05T10:30:00.000Z\"\n    },\n    \"affectedProducts\": 0\n  }\n}"
            },
            {
              "name": "Error - Category in Use",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Kategori tidak dapat dihapus karena masih digunakan oleh 3 produk. Gunakan parameter force=true untuk menghapus paksa (produk akan kehilangan kategori).\",\n  \"data\": {\n    \"productCount\": 3\n  }\n}"
            }
          ]
        },
        {
          "name": "Force Delete Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates affected products\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('affectedProducts');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}?force=true",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "{{categoryId}}"],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                }
              ]
            },
            "description": "Force delete a category and remove it from all associated products"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/1?force=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "1"],
                  "query": [
                    {
                      "key": "force",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Kategori berhasil dihapus dan 3 produk telah dilepas dari kategori ini\",\n  \"data\": {\n    \"deletedCategory\": {\n      \"id\": 1,\n      \"Nama\": \"Elektronik\",\n      \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n      \"updatedAt\": \"2025-06-05T10:30:00.000Z\"\n    },\n    \"affectedProducts\": 3\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Categories with Product Count",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains product count\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        pm.expect(jsonData.data[0]).to.have.property('productCount');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/product-count?search=",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "product-count"],
              "query": [
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term for category name"
                }
              ]
            },
            "description": "Get all categories with their product counts"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/categories/product-count",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "product-count"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Data kategori dengan jumlah produk berhasil diambil\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"Nama\": \"Elektronik\",\n      \"createdAt\": \"2025-06-05T10:30:00.000Z\",\n      \"updatedAt\": \"2025-06-05T10:30:00.000Z\",\n      \"productCount\": 5\n    },\n    {\n      \"id\": 2,\n      \"Nama\": \"Fashion\",\n      \"createdAt\": \"2025-06-05T10:31:00.000Z\",\n      \"updatedAt\": \"2025-06-05T10:31:00.000Z\",\n      \"productCount\": 12\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Bulk Delete Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains deleted count\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.data).to.have.property('deletedCount');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryIds\": [1, 2, 3]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/bulk-delete?force=false",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "bulk-delete"],
              "query": [
                {
                  "key": "force",
                  "value": "false",
                  "description": "Force delete even if products are using these categories"
                }
              ]
            },
            "description": "Delete multiple categories at once"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"categoryIds\": [1, 2]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories/bulk-delete?force=false",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "bulk-delete"],
                  "query": [
                    {
                      "key": "force",
                      "value": "false"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"2 kategori berhasil dihapus\",\n  \"data\": {\n    \"deletedCount\": 2,\n    \"affectedProducts\": 0\n  }\n}"
            },
            {
              "name": "Error - Categories in Use",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"categoryIds\": [1, 2, 3]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories/bulk-delete?force=false",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "bulk-delete"],
                  "query": [
                    {
                      "key": "force",
                      "value": "false"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"5 produk masih menggunakan kategori yang akan dihapus. Gunakan parameter force=true untuk menghapus paksa.\",\n  \"data\": {\n    \"productCount\": 5,\n    \"affectedCategories\": 3\n  }\n}"
            }
          ]
        },
        {
          "name": "Bulk Delete Categories (Force)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains deletion info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('deletedCount');",
                  "    pm.expect(jsonData.data).to.have.property('affectedProducts');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryIds\": [1, 2, 3]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/bulk-delete?force=true",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "bulk-delete"],
              "query": [
                {
                  "key": "force",
                  "value": "true"
                }
              ]
            },
            "description": "Force delete multiple categories and remove them from all associated products"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"categoryIds\": [1, 2, 3]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/categories/bulk-delete?force=true",
                  "host": ["{{baseUrl}}"],
                  "path": ["categories", "bulk-delete"],
                  "query": [
                    {
                      "key": "force",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"3 kategori berhasil dihapus\",\n  \"data\": {\n    \"deletedCount\": 3,\n    \"affectedProducts\": 8,\n    \"notFoundIds\": []\n  }\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Create Category - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contains validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Nama\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": ["{{baseUrl}}"],
              "path": ["categories"]
            },
            "description": "Test validation error with empty category name"
          }
        },
        {
          "name": "Get Category - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include('tidak ditemukan');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/999",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "999"]
            },
            "description": "Test getting a non-existent category"
          }
        },
        {
          "name": "Update Category - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"Nama\": \"Updated Category\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/999",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "999"]
            },
            "description": "Test updating a non-existent category"
          }
        },
        {
          "name": "Delete Category - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response indicates not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories/999",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "999"]
            },
            "description": "Test deleting a non-existent category"
          }
        },
        {
          "name": "Bulk Delete - Empty Array",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.message).to.include('tidak boleh kosong');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryIds\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/bulk-delete",
              "host": ["{{baseUrl}}"],
              "path": ["categories", "bulk-delete"]
            },
            "description": "Test bulk delete with empty array"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values if not already set",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "    pm.collectionVariables.set('baseUrl', 'http://localhost:3000');",
          "}",
          "",
          "if (!pm.collectionVariables.get('categoryId')) {",
          "    pm.collectionVariables.set('categoryId', '1');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response format",
          "pm.test(\"Response has correct format\", function () {",
          "    var jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "    pm.expect(jsonData).to.have.property('message');",
          "    pm.expect(jsonData).to.have.property('data');",
          "});",
          "",
          "// Log response for debugging",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Body:', pm.response.text());"
        ]
      }
    }
  ]
}
                