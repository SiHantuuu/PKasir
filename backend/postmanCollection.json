{
  "info": {
    "name": "Kantin App API Tests",
    "description": "Automated tests for Kantin Application API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.message).to.eql('User registered successfully');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.user && responseJson.user.id) {",
                  "    pm.environment.set(\"student_id\", responseJson.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"Nama\": \"Test Student\",\n    \"NFCId\": \"12345678\",\n    \"Pin\": \"123456\",\n    \"Amount\": 50000,\n    \"role\": \"murid\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          }
        },
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.message).to.eql('User registered successfully');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.user && responseJson.user.id) {",
                  "    pm.environment.set(\"admin_id\", responseJson.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"Nama\": \"Test Admin\",\n    \"NFCId\": \"87654321\",\n    \"Password\": \"admin123\",\n    \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.token) {",
                  "    pm.environment.set(\"admin_token\", responseJson.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"Nama\": \"Test Admin\",\n    \"Password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login/admin",
              "host": ["{{base_url}}"],
              "path": ["login", "admin"]
            }
          }
        },
        {
          "name": "Login Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.token) {",
                  "    pm.environment.set(\"student_token\", responseJson.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"Nama\": \"Test Student\",\n    \"Pin\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login/murid",
              "host": ["{{base_url}}"],
              "path": ["login", "murid"]
            }
          }
        },
        {
          "name": "Get User by NFC",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('Nama');",
                  "    pm.expect(responseJson).to.have.property('Amount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/nfc/12345678",
              "host": ["{{base_url}}"],
              "path": ["user", "nfc", "12345678"]
            }
          }
        },
        {
          "name": "Get User Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('Id');",
                  "    pm.expect(responseJson).to.have.property('Nim');",
                  "    pm.expect(responseJson).to.have.property('Balance');",
                  "    pm.expect(responseJson).to.have.property('Nama');",
                  "    pm.expect(responseJson).to.have.property('Role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["user", "{{student_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "    pm.expect(responseJson.message).to.eql('Category created successfully');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.category && responseJson.category.id) {",
                  "    pm.environment.set(\"category_id\", responseJson.category.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Category\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            }
          }
        },
        {
          "name": "Get All Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            }
          }
        },
        {
          "name": "Get Category by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}"]
            }
          }
        },
        {
          "name": "Update Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "    pm.expect(responseJson.message).to.eql('Category updated successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Test Category\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('product');",
                  "    pm.expect(responseJson.message).to.eql('Product created successfully');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.product && responseJson.product.id) {",
                  "    pm.environment.set(\"product_id\", responseJson.product.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productName\": \"Test Product\",\n    \"price\": 5000,\n    \"categoryId\": \"{{category_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products",
              "host": ["{{base_url}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products",
              "host": ["{{base_url}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('ProductName');",
                  "    pm.expect(responseJson).to.have.property('Price');",
                  "    pm.expect(responseJson).to.have.property('CategoryId');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            }
          }
        },
        {
          "name": "Get Products by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/category/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "category", "{{category_id}}"]
            }
          }
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('product');",
                  "    pm.expect(responseJson.message).to.eql('Product updated successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productName\": \"Updated Test Product\",\n    \"price\": 6000,\n    \"categoryId\": \"{{category_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            }
          }
        },
        {
          "name": "Get Product by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/name/Test",
              "host": ["{{base_url}}"],
              "path": ["products", "name", "Test"]
            }
          }
        }
      ]
    },
    {
      "name": "Top-up",
      "item": [
        {
          "name": "Verify User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('userId');",
                  "    pm.expect(responseJson.message).to.eql('User verified');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{student_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/user",
              "host": ["{{base_url}}"],
              "path": ["user"]
            }
          }
        },
        {
          "name": "Get User Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('Nama');",
                  "    pm.expect(responseJson).to.have.property('Balance');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.environment.set(\"initial_balance\", responseJson.Balance);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/user/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["user", "{{student_id}}"]
            }
          }
        },
        {
          "name": "Get Transaction History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/history/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["history", "{{student_id}}"]
            }
          }
        },
        {
          "name": "Top-up Balance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('newBalance');",
                  "    pm.expect(responseJson).to.have.property('transactionId');",
                  "    pm.expect(responseJson.message).to.eql('Balance updated successfully');",
                  "});",
                  "",
                  "pm.test(\"Balance was increased correctly\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    const initialBalance = parseInt(pm.environment.get(\"initial_balance\"), 10);",
                  "    const topupAmount = 10000;",
                  "    const expectedBalance = initialBalance + topupAmount;",
                  "    ",
                  "    pm.expect(responseJson.newBalance).to.eql(expectedBalance);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.transactionId) {",
                  "    pm.environment.set(\"topup_transaction_id\", responseJson.transactionId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{student_id}}\",\n    \"amount\": 10000,\n    \"productId\": \"{{product_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/topup",
              "host": ["{{base_url}}"],
              "path": ["topup"]
            }
          }
        }
      ]
    },
    {
      "name": "Transactions",
      "item": [
        {
          "name": "Process Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  pm.expect(responseJson).to.have.property('message');",
                  "  pm.expect(responseJson).to.have.property('transactionId');",
                  "  pm.expect(responseJson).to.have.property('newBalance');",
                  "  pm.expect(responseJson.message).to.eql('Transaction successful');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.transactionId) {",
                  "  pm.environment.set(\"transaction_id\", responseJson.transactionId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{student_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"userId\": \"{{student_id}}\",\n \"totalPrice\": 5000,\n \"productId\": \"{{product_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transaction",
              "host": ["{{base_url}}"],
              "path": ["transaction"]
            }
          }
        },
        {
          "name": "Get All Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions",
              "host": ["{{base_url}}"],
              "path": ["transactions"]
            }
          }
        },
        {
          "name": "Get Transaction by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has transaction details\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  pm.expect(responseJson).to.have.property('id');",
                  "  pm.expect(responseJson).to.have.property('TransactionDate');",
                  "  pm.expect(responseJson).to.have.property('Amount');",
                  "  pm.expect(responseJson).to.have.property('TransactionType');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transaction/{{transaction_id}}",
              "host": ["{{base_url}}"],
              "path": ["transaction", "{{transaction_id}}"]
            }
          }
        },
        {
          "name": "Get Transactions by User ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  pm.expect(Array.isArray(responseJson)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains transactions for the specified user\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  if (responseJson.length > 0) {",
                  "    pm.expect(responseJson[0]).to.have.property('CustomerId');",
                  "    pm.expect(responseJson[0].CustomerId.toString()).to.eql(pm.environment.get(\"student_id\").toString());",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{student_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transactions/user/{{student_id}}",
              "host": ["{{base_url}}"],
              "path": ["transactions", "user", "{{student_id}}"]
            }
          }
        },
        {
          "name": "Update Transaction Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function() {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function() {",
                  "  const responseJson = pm.response.json();",
                  "  pm.expect(responseJson).to.have.property('message');",
                  "  pm.expect(responseJson).to.have.property('transaction');",
                  "  pm.expect(responseJson.message).to.eql('Transaction updated successfully');",
                  "  pm.expect(responseJson.transaction.Description).to.eql('Updated description for testing');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n \"description\": \"Updated description for testing\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/transaction/{{transaction_id}}",
              "host": ["{{base_url}}"],
              "path": ["transaction", "{{transaction_id}}"]
            }
          }
        },
        {
          "name": "Cancel Transaction (Within 24 Hours)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function() {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "  pm.test(\"Response indicates transaction was deleted and refunded\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('refundAmount');",
                  "    pm.expect(responseJson).to.have.property('newBalance');",
                  "    pm.expect(responseJson.message).to.eql('Transaction deleted and payment refunded');",
                  "  });",
                  "} else if (pm.response.code === 400) {",
                  "  pm.test(\"Response indicates transaction is outside refund window\", function() {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('cannot be refunded');",
                  "  });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{student_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/transaction/{{transaction_id}}",
              "host": ["{{base_url}}"],
              "path": ["transaction", "{{transaction_id}}"]
            }
          }
        }
      ]
    }
  ]
}
